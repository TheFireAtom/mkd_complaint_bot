from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler, ConversationHandler
)
from telegram import BotCommand
from datetime import datetime
from dotenv import load_dotenv
import os
import openpyxl
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
PROBLEM_TYPE, USER_DETAILS, OTHER_PROBLEM = range(3)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TOKEN")
EXCEL_FILE = "complaints.xlsx"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Excel
if not os.path.exists(EXCEL_FILE):
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["–î–∞—Ç–∞", "–§–ò–û", "–≠—Ç–∞–∂", "–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–î–æ–º", "–î–æ–º–æ—Ñ–æ–Ω", "–ü—Ä–æ–±–ª–µ–º–∞"])
    wb.save(EXCEL_FILE)

PROBLEM_TRANSLATIONS = {
    "water_leak": "–ü—Ä–æ—Ç–µ—á–∫–∞ –≤–æ–¥—ã",
    "elevator_broken": "–ü–æ–ª–æ–º–∫–∞ –ª–∏—Ñ—Ç–∞",
    "electricity_issue": "–ü—Ä–æ–±–ª–µ–º—ã —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º",
    "noisy_neighbors": "–®—É–º–Ω—ã–µ —Å–æ—Å–µ–¥–∏",
    "garbage_not_removed": "–ú—É—Å–æ—Ä –Ω–µ –≤—ã–≤–æ–∑–∏—Ç—Å—è",
    "property_damage": "–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ –≤ –¥–æ–º–µ", callback_data="house_problem")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")],
        [InlineKeyboardButton("GitHub", url="https://github.com")]
    ]
    markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    else:
        await update.callback_query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    return ConversationHandler.END

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üÜò –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n"
        "/start ‚Äì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äì –ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã\n"
        "/clear ‚Äì –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç (—Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏)\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞."
    )
    await update.message.reply_text(text)


async def house_problem_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ—Ç–µ—á–∫–∞ –≤–æ–¥—ã", callback_data="water_leak")],
        [InlineKeyboardButton("–ü–æ–ª–æ–º–∫–∞ –ª–∏—Ñ—Ç–∞", callback_data="elevator_broken")],
        [InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º", callback_data="electricity_issue")],
        [InlineKeyboardButton("–®—É–º–Ω—ã–µ —Å–æ—Å–µ–¥–∏", callback_data="noisy_neighbors")],
        [InlineKeyboardButton("–ú—É—Å–æ—Ä –Ω–µ –≤—ã–≤–æ–∑–∏—Ç—Å—è", callback_data="garbage_not_removed")],
        [InlineKeyboardButton("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞", callback_data="property_damage")],
        [InlineKeyboardButton("–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞", callback_data="other_problem")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=markup)
    return PROBLEM_TYPE

async def select_problem_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "back_to_start":
        return await start(update, context)
    if query.data == "other_problem":
        await query.edit_message_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É (—Ç–µ–∫—Å—Ç–æ–º):")
        return OTHER_PROBLEM

    context.user_data['problem_type'] = PROBLEM_TRANSLATIONS.get(query.data, query.data)
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    return USER_DETAILS

async def get_other_problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['problem_type'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    return USER_DETAILS

async def ask_floor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(str(i), callback_data=f"floor_{i}") for i in range(1, 6)],
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="manual_floor")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–∂ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:", reply_markup=markup)

async def get_user_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'fio' not in context.user_data:
        context.user_data['fio'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂:")
        return USER_DETAILS
    elif 'floor' not in context.user_data:
        if not update.message.text.isdigit():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–∞–∂ ‚Äî —ç—Ç–æ —á–∏—Å–ª–æ
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç—Ç–∞–∂ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞):")
            return USER_DETAILS
        context.user_data['floor'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
        return USER_DETAILS
    elif 'apartment' not in context.user_data:
        context.user_data['apartment'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞:")
        return USER_DETAILS
    elif 'house_number' not in context.user_data:
        context.user_data['house_number'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–æ—Ñ–æ–Ω–∞:")
        return USER_DETAILS
    else:
        context.user_data['intercom'] = update.message.text

        try:
            wb = openpyxl.load_workbook(EXCEL_FILE)
            ws = wb.active
            ws.append([
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                context.user_data['fio'],
                context.user_data['floor'],
                context.user_data['apartment'],
                context.user_data['house_number'],
                context.user_data['intercom'],
                context.user_data['problem_type']
            ])
            wb.save(EXCEL_FILE)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É Excel.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª Excel: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        await update.message.reply_text("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        context.user_data.clear()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        return ConversationHandler.END

async def support_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text("üìû +7 (123) 456-78-90\nüìß support@example.com\nüïí 9:00-18:00 (–ü–Ω-–ü—Ç)",
                                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]))

async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ (—Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏).",
                                                  reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]))

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ API Telegram. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.")

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "house_problem":
        return await house_problem_menu(update, context)
    elif data == "support":
        return await support_info(update, context)
    elif data == "clear_chat":
        return await clear_chat(update, context)
    elif data == "back_to_start":
        return await start(update, context)

async def floor_keyboard_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("floor_"):
        floor = query.data.split("_")[1]
        context.user_data["floor"] = floor
        context.user_data["step"] = "apartment"
        await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —ç—Ç–∞–∂: {floor}")
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
        return USER_DETAILS

    elif query.data == "manual_floor":
        context.user_data["step"] = "floor"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ –≤—Ä—É—á–Ω—É—é:")
        return USER_DETAILS

async def set_bot_commands(app: Application):
    commands = [
        BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "–ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã"),
        BotCommand("clear", "–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ (—Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∞—è)")
    ]
    await app.bot.set_my_commands(commands)

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(button_click)],
    states={
        PROBLEM_TYPE: [CallbackQueryHandler(select_problem_type)],
        OTHER_PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_other_problem)],
        USER_DETAILS: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, get_user_details),
            CallbackQueryHandler(floor_keyboard_handler, pattern="^floor_\\d+$|^manual_floor$")
        ]
    },
    fallbacks=[CommandHandler("start", start)]
)

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("clear", clear_command))
    app.add_handler(CallbackQueryHandler(button_click))

    app.post_init = set_bot_commands
    app.run_polling()

if __name__ == "__main__":
    main()
